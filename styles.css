
/*NOTE Selects absolutely everything and applies the border-box box-sizing to make layout easier*/
*, *::after, *::before {
    box-sizing: border-box;
}

/*NOTE creates a variable for cell size keeping it consistent across the classes. Also creates the size for the mark to be
relative to the cell, so if the cell size changes, the mark size will change to adapt */
:root {
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size) * .9);
}

.backColor {
    background-color: aquamarine;
}


/*NOTE gives the heading a font, color, size, centers it and provides a top margin */
.title {
    font-family: "Audiowide";
    color: white;
    text-align: center;
    font-size: 40px;
    margin-top: 10%;
}

/*NOTE gives the player display a color, font, size, while centering it and providing a top and bottom margin,
allowing for space between the heading and the board */
.display {
    color: white;
    font-family: "Audiowide";
    font-size: 25px;
    text-align: center;
    margin-top: 1em;
    margin-bottom: 1em;
}

/*NOTE provides the colors for player x and o in the player display */
.playerX {
    color: blue;
}

.playerO {
    color: teal;
}

/*NOTE defines the parameters of the board and centers it */
.board {
    background-color: aquamarine;
    max-width: 300px;
    max-height: 300px;
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3, auto);/*gives three separate columns that will auto size to the size of the cells below */
}

/*NOTE creates a the parameters of the cell and the items within the cell, as well as the type of cursor*/
.cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border: 3px solid white;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}

/*NOTE Targets cells in the top row and removes top border*/
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

/*NOTE Targets cells on the left of the grid and removes the left border*/
.cell:nth-child(3n + 1) {
    border-left: none;
}

/*NOTE Targets cells on the right of the grid and removes the right border*/
.cell:nth-child(3n + 3) {
    border-right: none;
}

/*NOTE Targets cells on the bottom of the grid and removes the bottom border */
.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
    border-bottom: none;
}

/*NOTE When a cell has been filled with an "X" or "O", the cursor will have a not allowed symbol */
.cell.x,
.cell.circle {
    cursor: not-allowed;
}

/*NOTE defines the color of the "X"*/
.cell.x::before,
.cell.x::after {
    background-color: blue;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    background-color: whitesmoke;
}

/*NOTE defines the color of the "O"*/
.cell.circle::before,
.cell.circle::after {
    background-color: teal;
}

/*NOTE defines the color of the X's and O's in the hover state*/
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    background-color: whitesmoke;
}

 /*REVIEW The following code will be using CSS to create the X and O, keeping it centered and uniform.
 Both the X and the O will utilize the before and after pseudo-elements to add in two marks into the cell. The X will be
 made by two marks that have reduced their width and then been turned 45 degrees. The O will be made by two marks
 with a border radius that has turned them into circles. The second O mark will be 70% smaller than the first and the same color
 as the background. This will also be applied to their hover states as well */

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    content: "";  /*creates an empty string so the pseudo-elements will render */
    position: absolute;
    width: calc(var(--mark-size) * .15); /*adds an element before and after that is 15% smaller than the mark size */
    height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);  /*rotates before element 45 degrees */
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg); /*rotates after element 45 degrees in opposite direction */
}

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    content: "";
    position: absolute;
    border-radius: 50%;

}

/*creates the first bigger circle*/
.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
    width: var(--mark-size);
    height: var(--mark-size);
}

/*creates the second smaller inner circle */
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
    background-color: aquamarine; /*NOTE the color of the smaller circle is the same in hover state, since you
    should be able to see through the O regardless if you've clicked on it or not */
}

/*NOTE The winning message display is none because it will not show up until JS flips it to "show", which is defined below. */
.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    font-family: "Audiowide";
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 5rem;
    flex-direction: column; 

}

/*NOTE defines the look of the winning message button. Since it is a child of winning-message, it will not show until prompted */
.winning-message button {
    font-size: 2rem;
    background-color: blueviolet;
    color: white;
    font-family: "Audiowide";
    border: 1px solid white;
    padding: .25em .5em;
    cursor: pointer;
}

/*NOTE Reverses the color of the button when you hover over it */
.winning-message button:hover {
    background-color: white;
    color: blueviolet;
    font-family: "Audiowide";
    border-color: blueviolet;

}

/*NOTE this class was created so JS could access it and change the state of the winning message once the game is done */
.winning-message.show {
    display: flex;
}