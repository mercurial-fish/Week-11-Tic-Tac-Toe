*, *::after, *::before {
    box-sizing: border-box;
}

:root {
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size) * .9);
}

.backColor {
    background-color: aquamarine;
}

body {
    background-color: aquamarine;
    margin: 0;
}

.title {
    font-family: "Audiowide";
    color: white;
    text-align: center;
    font-size: 40px;
    margin-top: 10%;
}

.display {
    color: white;
    font-family: "Audiowide";
    font-size: 25px;
    text-align: center;
    margin-top: 1em;
    margin-bottom: 1em;
}

.playerX {
    color: blue;
}

.playerO {
    color: teal;
}

.board {
    background-color: aquamarine;
    max-width: 300px;
    max-height: 300px; /*NOTE - this will make the board the entire size of the
    screen, so it will be easier to center it*/
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3, auto);
}


.cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border: 3px solid white;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}

.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
    border-top: none;
}

.cell:nth-child(3n + 1) {
    border-left: none;
}

.cell:nth-child(3n + 3) {
    border-right: none;
}

.cell:last-child,
.cell:nth-child(8),
.cell:nth-child(7) {
    border-bottom: none;
}

.cell.x,
.cell.circle {
    cursor: not-allowed;
}

.cell.x::before,
.cell.x::after {
    background-color: blue;
}

.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    background-color: whitesmoke;
}

.cell.circle::before,
.cell.circle::after {
    background-color: teal;
}

.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    background-color: whitesmoke;
}

.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after {
    content: "";
    position: absolute;
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
}

.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg);
}

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after {
    content: "";
    position: absolute;
    border-radius: 50%;

}

.cell.circle::before,
.board.circle .cell:not(.x):not(.circle):hover::before {
    width: var(--mark-size);
    height: var(--mark-size);
}

.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after {
    width: calc(var(--mark-size) * .7);
    height: calc(var(--mark-size) * .7);
    background-color: aquamarine;
}

.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    font-family: "Audiowide";
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 5rem;
    flex-direction: column; 

} /*REVIEW - can this be turned into a bootstrap alert? and is there a way to add a heading to this that doesn't completely fuck everything up? */

.winning-message button {
    font-size: 2rem;
    background-color: blueviolet;
    color: white;
    font-family: "Audiowide";
    border: 1px solid white;
    padding: .25em .5em;
    cursor: pointer;
}

.winning-message button:hover {
    background-color: white;
    color: blueviolet;
    font-family: "Audiowide";
    border-color: blueviolet;

}

.winning-message.show {
    display: flex;
}

/*REVIEW 
Using any of the tools you’ve worked with so far, create a game of Tic-Tac-Toe.
    1. Create a Tic-Tac-Toe game grid using your HTML element of choice. 
    2. When a cell in the grid is clicked, an X or O should appear in that spot depending on whose turn it is.
    3. A heading should say whether it is X’s or O’s turn and change with each move made.
    4. A button should be available to clear the grid and restart the game.
    5. When a player has won, or the board is full and the game results in a draw, a Bootstrap alert or similar Bootstrap component 
    should appear across the screen announcing the winner.*/